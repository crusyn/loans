// Code generated by ent, DO NOT EDIT.

package loan

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the loan type in the database.
	Label = "loan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldRate holds the string denoting the rate field in the database.
	FieldRate = "rate"
	// FieldTerm holds the string denoting the term field in the database.
	FieldTerm = "term"
	// FieldBorrowerID holds the string denoting the borrower_id field in the database.
	FieldBorrowerID = "borrower_id"
	// EdgeBorrower holds the string denoting the borrower edge name in mutations.
	EdgeBorrower = "borrower"
	// Table holds the table name of the loan in the database.
	Table = "loans"
	// BorrowerTable is the table that holds the borrower relation/edge.
	BorrowerTable = "loans"
	// BorrowerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	BorrowerInverseTable = "users"
	// BorrowerColumn is the table column denoting the borrower relation/edge.
	BorrowerColumn = "borrower_id"
)

// Columns holds all SQL columns for loan fields.
var Columns = []string{
	FieldID,
	FieldAmount,
	FieldRate,
	FieldTerm,
	FieldBorrowerID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Loan queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByRate orders the results by the rate field.
func ByRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRate, opts...).ToFunc()
}

// ByTerm orders the results by the term field.
func ByTerm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTerm, opts...).ToFunc()
}

// ByBorrowerID orders the results by the borrower_id field.
func ByBorrowerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBorrowerID, opts...).ToFunc()
}

// ByBorrowerField orders the results by borrower field.
func ByBorrowerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBorrowerStep(), sql.OrderByField(field, opts...))
	}
}
func newBorrowerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BorrowerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BorrowerTable, BorrowerColumn),
	)
}
