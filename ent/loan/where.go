// Code generated by ent, DO NOT EDIT.

package loan

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/crusyn/loans/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldID, id))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldAmount, v))
}

// Rate applies equality check predicate on the "rate" field. It's identical to RateEQ.
func Rate(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldRate, v))
}

// Term applies equality check predicate on the "term" field. It's identical to TermEQ.
func Term(v int) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldTerm, v))
}

// BorrowerID applies equality check predicate on the "borrower_id" field. It's identical to BorrowerIDEQ.
func BorrowerID(v int) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldBorrowerID, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldAmount, v))
}

// RateEQ applies the EQ predicate on the "rate" field.
func RateEQ(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldRate, v))
}

// RateNEQ applies the NEQ predicate on the "rate" field.
func RateNEQ(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldRate, v))
}

// RateIn applies the In predicate on the "rate" field.
func RateIn(vs ...float64) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldRate, vs...))
}

// RateNotIn applies the NotIn predicate on the "rate" field.
func RateNotIn(vs ...float64) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldRate, vs...))
}

// RateGT applies the GT predicate on the "rate" field.
func RateGT(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldRate, v))
}

// RateGTE applies the GTE predicate on the "rate" field.
func RateGTE(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldRate, v))
}

// RateLT applies the LT predicate on the "rate" field.
func RateLT(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldRate, v))
}

// RateLTE applies the LTE predicate on the "rate" field.
func RateLTE(v float64) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldRate, v))
}

// TermEQ applies the EQ predicate on the "term" field.
func TermEQ(v int) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldTerm, v))
}

// TermNEQ applies the NEQ predicate on the "term" field.
func TermNEQ(v int) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldTerm, v))
}

// TermIn applies the In predicate on the "term" field.
func TermIn(vs ...int) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldTerm, vs...))
}

// TermNotIn applies the NotIn predicate on the "term" field.
func TermNotIn(vs ...int) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldTerm, vs...))
}

// TermGT applies the GT predicate on the "term" field.
func TermGT(v int) predicate.Loan {
	return predicate.Loan(sql.FieldGT(FieldTerm, v))
}

// TermGTE applies the GTE predicate on the "term" field.
func TermGTE(v int) predicate.Loan {
	return predicate.Loan(sql.FieldGTE(FieldTerm, v))
}

// TermLT applies the LT predicate on the "term" field.
func TermLT(v int) predicate.Loan {
	return predicate.Loan(sql.FieldLT(FieldTerm, v))
}

// TermLTE applies the LTE predicate on the "term" field.
func TermLTE(v int) predicate.Loan {
	return predicate.Loan(sql.FieldLTE(FieldTerm, v))
}

// BorrowerIDEQ applies the EQ predicate on the "borrower_id" field.
func BorrowerIDEQ(v int) predicate.Loan {
	return predicate.Loan(sql.FieldEQ(FieldBorrowerID, v))
}

// BorrowerIDNEQ applies the NEQ predicate on the "borrower_id" field.
func BorrowerIDNEQ(v int) predicate.Loan {
	return predicate.Loan(sql.FieldNEQ(FieldBorrowerID, v))
}

// BorrowerIDIn applies the In predicate on the "borrower_id" field.
func BorrowerIDIn(vs ...int) predicate.Loan {
	return predicate.Loan(sql.FieldIn(FieldBorrowerID, vs...))
}

// BorrowerIDNotIn applies the NotIn predicate on the "borrower_id" field.
func BorrowerIDNotIn(vs ...int) predicate.Loan {
	return predicate.Loan(sql.FieldNotIn(FieldBorrowerID, vs...))
}

// HasBorrower applies the HasEdge predicate on the "borrower" edge.
func HasBorrower() predicate.Loan {
	return predicate.Loan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BorrowerTable, BorrowerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBorrowerWith applies the HasEdge predicate on the "borrower" edge with a given conditions (other predicates).
func HasBorrowerWith(preds ...predicate.User) predicate.Loan {
	return predicate.Loan(func(s *sql.Selector) {
		step := newBorrowerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Loan) predicate.Loan {
	return predicate.Loan(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Loan) predicate.Loan {
	return predicate.Loan(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Loan) predicate.Loan {
	return predicate.Loan(sql.NotPredicates(p))
}
