// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/crusyn/loans/ent/loan"
	"github.com/crusyn/loans/ent/sharedloan"
	"github.com/crusyn/loans/ent/user"
)

// SharedLoan is the model entity for the SharedLoan schema.
type SharedLoan struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// LoanID holds the value of the "loan_id" field.
	LoanID int `json:"loan_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SharedLoanQuery when eager-loading is set.
	Edges        SharedLoanEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SharedLoanEdges holds the relations/edges for other nodes in the graph.
type SharedLoanEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Loan holds the value of the loan edge.
	Loan *Loan `json:"loan,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SharedLoanEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// LoanOrErr returns the Loan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SharedLoanEdges) LoanOrErr() (*Loan, error) {
	if e.loadedTypes[1] {
		if e.Loan == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: loan.Label}
		}
		return e.Loan, nil
	}
	return nil, &NotLoadedError{edge: "loan"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SharedLoan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sharedloan.FieldID, sharedloan.FieldUserID, sharedloan.FieldLoanID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SharedLoan fields.
func (sl *SharedLoan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sharedloan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sl.ID = int(value.Int64)
		case sharedloan.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				sl.UserID = int(value.Int64)
			}
		case sharedloan.FieldLoanID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field loan_id", values[i])
			} else if value.Valid {
				sl.LoanID = int(value.Int64)
			}
		default:
			sl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SharedLoan.
// This includes values selected through modifiers, order, etc.
func (sl *SharedLoan) Value(name string) (ent.Value, error) {
	return sl.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the SharedLoan entity.
func (sl *SharedLoan) QueryUser() *UserQuery {
	return NewSharedLoanClient(sl.config).QueryUser(sl)
}

// QueryLoan queries the "loan" edge of the SharedLoan entity.
func (sl *SharedLoan) QueryLoan() *LoanQuery {
	return NewSharedLoanClient(sl.config).QueryLoan(sl)
}

// Update returns a builder for updating this SharedLoan.
// Note that you need to call SharedLoan.Unwrap() before calling this method if this SharedLoan
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *SharedLoan) Update() *SharedLoanUpdateOne {
	return NewSharedLoanClient(sl.config).UpdateOne(sl)
}

// Unwrap unwraps the SharedLoan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *SharedLoan) Unwrap() *SharedLoan {
	_tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("ent: SharedLoan is not a transactional entity")
	}
	sl.config.driver = _tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *SharedLoan) String() string {
	var builder strings.Builder
	builder.WriteString("SharedLoan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sl.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", sl.UserID))
	builder.WriteString(", ")
	builder.WriteString("loan_id=")
	builder.WriteString(fmt.Sprintf("%v", sl.LoanID))
	builder.WriteByte(')')
	return builder.String()
}

// SharedLoans is a parsable slice of SharedLoan.
type SharedLoans []*SharedLoan
