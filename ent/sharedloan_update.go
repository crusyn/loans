// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/crusyn/loans/ent/loan"
	"github.com/crusyn/loans/ent/predicate"
	"github.com/crusyn/loans/ent/sharedloan"
	"github.com/crusyn/loans/ent/user"
)

// SharedLoanUpdate is the builder for updating SharedLoan entities.
type SharedLoanUpdate struct {
	config
	hooks    []Hook
	mutation *SharedLoanMutation
}

// Where appends a list predicates to the SharedLoanUpdate builder.
func (slu *SharedLoanUpdate) Where(ps ...predicate.SharedLoan) *SharedLoanUpdate {
	slu.mutation.Where(ps...)
	return slu
}

// SetUserID sets the "user_id" field.
func (slu *SharedLoanUpdate) SetUserID(i int) *SharedLoanUpdate {
	slu.mutation.SetUserID(i)
	return slu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (slu *SharedLoanUpdate) SetNillableUserID(i *int) *SharedLoanUpdate {
	if i != nil {
		slu.SetUserID(*i)
	}
	return slu
}

// SetLoanID sets the "loan_id" field.
func (slu *SharedLoanUpdate) SetLoanID(i int) *SharedLoanUpdate {
	slu.mutation.SetLoanID(i)
	return slu
}

// SetNillableLoanID sets the "loan_id" field if the given value is not nil.
func (slu *SharedLoanUpdate) SetNillableLoanID(i *int) *SharedLoanUpdate {
	if i != nil {
		slu.SetLoanID(*i)
	}
	return slu
}

// SetUser sets the "user" edge to the User entity.
func (slu *SharedLoanUpdate) SetUser(u *User) *SharedLoanUpdate {
	return slu.SetUserID(u.ID)
}

// SetLoan sets the "loan" edge to the Loan entity.
func (slu *SharedLoanUpdate) SetLoan(l *Loan) *SharedLoanUpdate {
	return slu.SetLoanID(l.ID)
}

// Mutation returns the SharedLoanMutation object of the builder.
func (slu *SharedLoanUpdate) Mutation() *SharedLoanMutation {
	return slu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (slu *SharedLoanUpdate) ClearUser() *SharedLoanUpdate {
	slu.mutation.ClearUser()
	return slu
}

// ClearLoan clears the "loan" edge to the Loan entity.
func (slu *SharedLoanUpdate) ClearLoan() *SharedLoanUpdate {
	slu.mutation.ClearLoan()
	return slu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (slu *SharedLoanUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, slu.sqlSave, slu.mutation, slu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (slu *SharedLoanUpdate) SaveX(ctx context.Context) int {
	affected, err := slu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (slu *SharedLoanUpdate) Exec(ctx context.Context) error {
	_, err := slu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slu *SharedLoanUpdate) ExecX(ctx context.Context) {
	if err := slu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slu *SharedLoanUpdate) check() error {
	if _, ok := slu.mutation.UserID(); slu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SharedLoan.user"`)
	}
	if _, ok := slu.mutation.LoanID(); slu.mutation.LoanCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SharedLoan.loan"`)
	}
	return nil
}

func (slu *SharedLoanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := slu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sharedloan.Table, sharedloan.Columns, sqlgraph.NewFieldSpec(sharedloan.FieldID, field.TypeInt))
	if ps := slu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if slu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sharedloan.UserTable,
			Columns: []string{sharedloan.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := slu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sharedloan.UserTable,
			Columns: []string{sharedloan.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if slu.mutation.LoanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sharedloan.LoanTable,
			Columns: []string{sharedloan.LoanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(loan.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := slu.mutation.LoanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sharedloan.LoanTable,
			Columns: []string{sharedloan.LoanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(loan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, slu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sharedloan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	slu.mutation.done = true
	return n, nil
}

// SharedLoanUpdateOne is the builder for updating a single SharedLoan entity.
type SharedLoanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SharedLoanMutation
}

// SetUserID sets the "user_id" field.
func (sluo *SharedLoanUpdateOne) SetUserID(i int) *SharedLoanUpdateOne {
	sluo.mutation.SetUserID(i)
	return sluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sluo *SharedLoanUpdateOne) SetNillableUserID(i *int) *SharedLoanUpdateOne {
	if i != nil {
		sluo.SetUserID(*i)
	}
	return sluo
}

// SetLoanID sets the "loan_id" field.
func (sluo *SharedLoanUpdateOne) SetLoanID(i int) *SharedLoanUpdateOne {
	sluo.mutation.SetLoanID(i)
	return sluo
}

// SetNillableLoanID sets the "loan_id" field if the given value is not nil.
func (sluo *SharedLoanUpdateOne) SetNillableLoanID(i *int) *SharedLoanUpdateOne {
	if i != nil {
		sluo.SetLoanID(*i)
	}
	return sluo
}

// SetUser sets the "user" edge to the User entity.
func (sluo *SharedLoanUpdateOne) SetUser(u *User) *SharedLoanUpdateOne {
	return sluo.SetUserID(u.ID)
}

// SetLoan sets the "loan" edge to the Loan entity.
func (sluo *SharedLoanUpdateOne) SetLoan(l *Loan) *SharedLoanUpdateOne {
	return sluo.SetLoanID(l.ID)
}

// Mutation returns the SharedLoanMutation object of the builder.
func (sluo *SharedLoanUpdateOne) Mutation() *SharedLoanMutation {
	return sluo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (sluo *SharedLoanUpdateOne) ClearUser() *SharedLoanUpdateOne {
	sluo.mutation.ClearUser()
	return sluo
}

// ClearLoan clears the "loan" edge to the Loan entity.
func (sluo *SharedLoanUpdateOne) ClearLoan() *SharedLoanUpdateOne {
	sluo.mutation.ClearLoan()
	return sluo
}

// Where appends a list predicates to the SharedLoanUpdate builder.
func (sluo *SharedLoanUpdateOne) Where(ps ...predicate.SharedLoan) *SharedLoanUpdateOne {
	sluo.mutation.Where(ps...)
	return sluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sluo *SharedLoanUpdateOne) Select(field string, fields ...string) *SharedLoanUpdateOne {
	sluo.fields = append([]string{field}, fields...)
	return sluo
}

// Save executes the query and returns the updated SharedLoan entity.
func (sluo *SharedLoanUpdateOne) Save(ctx context.Context) (*SharedLoan, error) {
	return withHooks(ctx, sluo.sqlSave, sluo.mutation, sluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sluo *SharedLoanUpdateOne) SaveX(ctx context.Context) *SharedLoan {
	node, err := sluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sluo *SharedLoanUpdateOne) Exec(ctx context.Context) error {
	_, err := sluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sluo *SharedLoanUpdateOne) ExecX(ctx context.Context) {
	if err := sluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sluo *SharedLoanUpdateOne) check() error {
	if _, ok := sluo.mutation.UserID(); sluo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SharedLoan.user"`)
	}
	if _, ok := sluo.mutation.LoanID(); sluo.mutation.LoanCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SharedLoan.loan"`)
	}
	return nil
}

func (sluo *SharedLoanUpdateOne) sqlSave(ctx context.Context) (_node *SharedLoan, err error) {
	if err := sluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sharedloan.Table, sharedloan.Columns, sqlgraph.NewFieldSpec(sharedloan.FieldID, field.TypeInt))
	id, ok := sluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SharedLoan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sharedloan.FieldID)
		for _, f := range fields {
			if !sharedloan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sharedloan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sharedloan.UserTable,
			Columns: []string{sharedloan.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sharedloan.UserTable,
			Columns: []string{sharedloan.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sluo.mutation.LoanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sharedloan.LoanTable,
			Columns: []string{sharedloan.LoanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(loan.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sluo.mutation.LoanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sharedloan.LoanTable,
			Columns: []string{sharedloan.LoanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(loan.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SharedLoan{config: sluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sharedloan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sluo.mutation.done = true
	return _node, nil
}
