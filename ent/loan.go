// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/crusyn/loans/ent/loan"
	"github.com/crusyn/loans/ent/user"
)

// Loan is the model entity for the Loan schema.
type Loan struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int `json:"amount,omitempty"`
	// Rate holds the value of the "rate" field.
	Rate float64 `json:"rate,omitempty"`
	// Term holds the value of the "term" field.
	Term int `json:"term,omitempty"`
	// BorrowerID holds the value of the "borrower_id" field.
	BorrowerID int `json:"borrower_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LoanQuery when eager-loading is set.
	Edges        LoanEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LoanEdges holds the relations/edges for other nodes in the graph.
type LoanEdges struct {
	// Borrower holds the value of the borrower edge.
	Borrower *User `json:"borrower,omitempty"`
	// SharedLoan holds the value of the shared_loan edge.
	SharedLoan []*SharedLoan `json:"shared_loan,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BorrowerOrErr returns the Borrower value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LoanEdges) BorrowerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Borrower == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Borrower, nil
	}
	return nil, &NotLoadedError{edge: "borrower"}
}

// SharedLoanOrErr returns the SharedLoan value or an error if the edge
// was not loaded in eager-loading.
func (e LoanEdges) SharedLoanOrErr() ([]*SharedLoan, error) {
	if e.loadedTypes[1] {
		return e.SharedLoan, nil
	}
	return nil, &NotLoadedError{edge: "shared_loan"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Loan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case loan.FieldRate:
			values[i] = new(sql.NullFloat64)
		case loan.FieldID, loan.FieldAmount, loan.FieldTerm, loan.FieldBorrowerID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Loan fields.
func (l *Loan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case loan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case loan.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				l.Amount = int(value.Int64)
			}
		case loan.FieldRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field rate", values[i])
			} else if value.Valid {
				l.Rate = value.Float64
			}
		case loan.FieldTerm:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field term", values[i])
			} else if value.Valid {
				l.Term = int(value.Int64)
			}
		case loan.FieldBorrowerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field borrower_id", values[i])
			} else if value.Valid {
				l.BorrowerID = int(value.Int64)
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Loan.
// This includes values selected through modifiers, order, etc.
func (l *Loan) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryBorrower queries the "borrower" edge of the Loan entity.
func (l *Loan) QueryBorrower() *UserQuery {
	return NewLoanClient(l.config).QueryBorrower(l)
}

// QuerySharedLoan queries the "shared_loan" edge of the Loan entity.
func (l *Loan) QuerySharedLoan() *SharedLoanQuery {
	return NewLoanClient(l.config).QuerySharedLoan(l)
}

// Update returns a builder for updating this Loan.
// Note that you need to call Loan.Unwrap() before calling this method if this Loan
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Loan) Update() *LoanUpdateOne {
	return NewLoanClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Loan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Loan) Unwrap() *Loan {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Loan is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Loan) String() string {
	var builder strings.Builder
	builder.WriteString("Loan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", l.Amount))
	builder.WriteString(", ")
	builder.WriteString("rate=")
	builder.WriteString(fmt.Sprintf("%v", l.Rate))
	builder.WriteString(", ")
	builder.WriteString("term=")
	builder.WriteString(fmt.Sprintf("%v", l.Term))
	builder.WriteString(", ")
	builder.WriteString("borrower_id=")
	builder.WriteString(fmt.Sprintf("%v", l.BorrowerID))
	builder.WriteByte(')')
	return builder.String()
}

// Loans is a parsable slice of Loan.
type Loans []*Loan
